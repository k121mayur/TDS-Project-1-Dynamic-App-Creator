"""Generate static application files based on the incoming task brief."""

from __future__ import annotations

import json
from datetime import datetime, timezone
from textwrap import dedent
from typing import Dict, Iterable, List

from schemas import TaskRequest


def render_index_html(task: TaskRequest, attachments: Iterable[str]) -> str:
    """Produce a minimal static page that surfaces the task metadata."""

    received = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
    attachment_list = (
        "\n".join(f'<li><a href="{path}" download>{path}</a></li>' for path in attachments)
        or "<li>None provided</li>"
    )
    checks_json = json.dumps(task.checks, indent=2)

    return dedent(
        f"""\
        <!doctype html>
        <html lang="en">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>{task.task} · Generated App</title>
            <link rel="stylesheet" href="styles.css" />
          </head>
          <body>
            <header>
              <h1>{task.brief}</h1>
              <p class="meta">Task: <strong>{task.task}</strong> · Round {task.round} · Received {received}</p>
            </header>

            <main>
              <section>
                <h2>Evaluation Checks</h2>
                <pre><code>{checks_json}</code></pre>
              </section>

              <section>
                <h2>Attachments</h2>
                <ul class="attachments">
                  {attachment_list}
                </ul>
              </section>

              <section>
                <h2>URL Parameters</h2>
                <p>Any query parameters passed to this page are displayed below.</p>
                <div id="params"></div>
              </section>
            </main>

            <footer>
              <p>Generated by the TDS LLM Code Deployment Orchestrator.</p>
            </footer>

            <script src="script.js"></script>
          </body>
        </html>
        """
    )


def render_styles_css() -> str:
    return dedent(
        """\
        :root {
          color-scheme: light dark;
          font-family: "Segoe UI", -apple-system, BlinkMacSystemFont, sans-serif;
          line-height: 1.6;
        }

        body {
          margin: 0 auto;
          max-width: 960px;
          padding: 2rem 1.5rem 4rem;
        }

        header h1 {
          margin-bottom: 0.25rem;
        }

        .meta {
          color: #6b7280;
          font-size: 0.9rem;
        }

        section {
          margin-top: 2.5rem;
        }

        pre {
          background: rgba(148, 163, 184, 0.2);
          padding: 1rem;
          border-radius: 0.5rem;
          overflow-x: auto;
        }

        ul.attachments {
          list-style: disc;
          margin-left: 1.5rem;
        }

        footer {
          margin-top: 4rem;
          font-size: 0.9rem;
          color: #9ca3af;
        }
        """
    )


def render_script_js() -> str:
    return dedent(
        """\
        (function () {
          const params = new URLSearchParams(window.location.search);
          const container = document.getElementById("params");
          if (!container) {
            return;
          }
          if ([...params.keys()].length === 0) {
            container.textContent = "No query parameters provided.";
            return;
          }

          const list = document.createElement("dl");
          list.className = "params";
          params.forEach((value, key) => {
            const term = document.createElement("dt");
            term.textContent = key;
            const desc = document.createElement("dd");
            desc.textContent = value;
            list.appendChild(term);
            list.appendChild(desc);
          });
          container.appendChild(list);
        })();
        """
    )


def render_readme(task: TaskRequest, pages_url: str) -> str:
    return dedent(
        f"""\
        # {task.task}

        This repository was generated automatically by the **TDS LLM Code Deployment Orchestrator** in response to a task brief.

        ## Live Site
        - {pages_url}

        ## Brief
        > {task.brief}

        ## Evaluation Checks
        ```json
        {json.dumps(task.checks, indent=2)}
        ```

        ## Attachments
        {", ".join(attachment.name for attachment in task.attachments) or "None"}

        ## Automation Notes
        - Static assets only (HTML, CSS, JS).
        - MIT License is included by default.
        - Deployment via GitHub Pages workflow.
        """
    )


def render_license(holder: str) -> str:
    year = datetime.now(timezone.utc).year
    return dedent(
        f"""\
        MIT License

        Copyright (c) {year} {holder}

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        """
    )


def render_pages_workflow() -> str:
    return dedent(
        """\
        name: Deploy to GitHub Pages

        on:
          push:
            branches: [ main ]

        permissions:
          contents: read
          pages: write
          id-token: write

        concurrency:
          group: "pages"
          cancel-in-progress: true

        jobs:
          build:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v4
              - name: Prepare static assets
                run: |
                  mkdir -p dist
                  cp -R * dist || true
              - uses: actions/upload-pages-artifact@v3
                with:
                  path: dist

          deploy:
            needs: build
            runs-on: ubuntu-latest
            environment:
              name: github-pages
              url: ${{ steps.deployment.outputs.page_url }}
            steps:
              - id: deployment
                uses: actions/deploy-pages@v4
        """
    )


def generate_static_site(
    task: TaskRequest,
    attachment_paths: List[str],
    pages_url: str,
    license_holder: str,
) -> Dict[str, bytes]:
    """
    Generate the core files for the static web app and repo metadata.
    """

    files: Dict[str, bytes] = {
        "index.html": render_index_html(task, attachment_paths).encode("utf-8"),
        "styles.css": render_styles_css().encode("utf-8"),
        "script.js": render_script_js().encode("utf-8"),
        "README.md": render_readme(task, pages_url).encode("utf-8"),
        "LICENSE": render_license(license_holder).encode("utf-8"),
        ".github/workflows/pages.yml": render_pages_workflow().encode("utf-8"),
    }

    return files

